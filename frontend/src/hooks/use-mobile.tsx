import { useState, useEffect, useCallback } from 'react';const MOBILE_BREAKPOINT = 768;/** * Production-ready hook for detecting mobile devices * - SSR compatible with proper hydration handling * - Optimized performance with proper cleanup * - Error boundaries and fallback handling * - TypeScript strict mode compliant */export function useIsMobile(): boolean {  // Initialize with false to prevent hydration mismatch  const [isMobile, setIsMobile] = useState<boolean>(false);  const [isClient, setIsClient] = useState<boolean>(false);  // Memoized handler to prevent unnecessary re-renders  const handleResize = useCallback(() => {    if (typeof window !== 'undefined') {      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);    }  }, []);  useEffect(() => {    // Check if we're on the client side    if (typeof window === 'undefined') {      return;    }    setIsClient(true);    // Set initial value    handleResize();    // Use ResizeObserver for better performance than resize events    let resizeObserver: ResizeObserver | null = null;    try {      // Fallback to matchMedia if ResizeObserver is not available      if (typeof ResizeObserver !== 'undefined') {        resizeObserver = new ResizeObserver(handleResize);        resizeObserver.observe(document.body);      } else {        // Fallback to matchMedia        const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);        mql.addEventListener("change", handleResize);        return () => {          mql.removeEventListener("change", handleResize);        };      }    } catch (error) {      // Fallback to window resize event if both fail      window.addEventListener('resize', handleResize);      return () => {        window.removeEventListener('resize', handleResize);      };    }    // Cleanup function    return () => {      if (resizeObserver) {        resizeObserver.disconnect();      }    };  }, [handleResize]);  // Return false during SSR to prevent hydration mismatch  if (!isClient) {    return false;  }  return isMobile;}