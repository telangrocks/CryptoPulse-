import { useState, useCallback } from 'react';interface AIResponse {  success: boolean;  result?: {    response: string;    category: 'trading' | 'technical' | 'risk' | 'general' | 'troubleshooting';    suggestions?: string[];    relatedFeatures?: string[];  };  error?: string;}interface AIRecommendation {  id: string;  title: string;  description: string;  action: string;  priority: 'high' | 'medium' | 'low';  category: string;}// Helper function for logging errorsconst logError = (message: string, component: string, error: unknown) => {};export function useAIAssistant() {  const [isLoading, setIsLoading] = useState(false);  const [error, setError] = useState<string | null>(null);  const processQuery = useCallback(async (query: string): Promise<AIResponse> => {    setIsLoading(true);    setError(null);    try {      const response = await fetch('/api/ai/process-query', {        method: 'POST',        headers: {          'Content-Type': 'application/json',          'Authorization': `Bearer ${localStorage.getItem('cryptopulse-session') || ''}`        },        body: JSON.stringify({ query }),      });      if (!response.ok) {        throw new Error('Failed to process AI query');      }      const result = await response.json();      return result;    } catch (err) {      const errorMessage = err instanceof Error ? err.message : 'Failed to process query';      setError(errorMessage);      return {        success: false,        error: errorMessage,      };    } finally {      setIsLoading(false);    }  }, []);  const getSuggestions = useCallback(async (category?: string): Promise<string[]> => {    try {      const response = await fetch('/api/ai/suggestions', {        method: 'POST',        headers: {          'Content-Type': 'application/json',          'Authorization': `Bearer ${localStorage.getItem('cryptopulse-session') || ''}`        },        body: JSON.stringify({ category }),      });      if (!response.ok) {        throw new Error('Failed to get AI suggestions');      }      const result = await response.json();      return result.suggestions || [];    } catch (err) {      logError('Failed to get suggestions:', 'useAIAssistant', err);      return [];    }  }, []);  const getUserRecommendations = useCallback(async (): Promise<{ success: boolean; recommendations: AIRecommendation[] }> => {    try {      const response = await fetch('/api/ai/recommendations', {        method: 'GET',        headers: {          'Content-Type': 'application/json',          'Authorization': `Bearer ${localStorage.getItem('cryptopulse-session') || ''}`        }      });      if (!response.ok) {        throw new Error('Failed to get user recommendations');      }      const result = await response.json();      return {        success: true,        recommendations: result.recommendations || [],      };    } catch (err) {      logError('Failed to get user recommendations:', 'useAIAssistant', err);      return {        success: false,        recommendations: [],      };    }  }, []);  const getPlatformStatus = useCallback(async () => {    try {      const response = await fetch('/api/ai/platform-status', {        method: 'GET',        headers: {          'Content-Type': 'application/json',          'Authorization': `Bearer ${localStorage.getItem('cryptopulse-session') || ''}`        }      });      if (!response.ok) {        throw new Error('Failed to get platform status');      }      return await response.json();    } catch (err) {      logError('Failed to get platform status:', 'useAIAssistant', err);      return {        success: false,        status: 'offline'      };    }  }, []);  return {    processQuery,    getSuggestions,    getUserRecommendations,    getPlatformStatus,    isLoading,    error,  };}