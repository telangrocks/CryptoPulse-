import { useCallback, useEffect, useRef } from 'react';
interface ErrorHandlerOptions {  timeout?: number;  onError?: (error: Error) => void;  onTimeout?: () => void;}export function useErrorHandler(options: ErrorHandlerOptions = {}) {  const { timeout = 10000, onError, onTimeout } = options;  const timeoutRef = useRef<NodeJS.Timeout>();  const errorHandlerRef = useRef<(e: ErrorEvent) => void>();  const createErrorUI = useCallback((error: Error) => {    const root = document.getElementById('root');    if (!root) return;    // Clear existing content safely    while (root.firstChild) {      root.removeChild(root.firstChild);    }    // Create safe DOM elements with proper text content (XSS protection)    const container = document.createElement('div');    container.style.cssText = `      padding: 20px;       color: white;       background: #1a1a1a;       min-height: 100vh;       font-family: Arial, sans-serif;      display: flex;      flex-direction: column;      align-items: center;      justify-content: center;      text-align: center;    `;    const h1 = document.createElement('h1');    h1.textContent = 'ðŸš€ CryptoPulse Trading Bot';    h1.style.cssText = 'font-size: 2rem; margin-bottom: 1rem; color: #8b5cf6;';    const p1 = document.createElement('p');    p1.textContent = 'Loading your trading application...';    p1.style.cssText = 'font-size: 1.2rem; margin-bottom: 1rem; color: #ccc;';    const p2 = document.createElement('p');    // Sanitize error message to prevent XSS    const errorMessage = error?.message || 'Unknown error';    p2.textContent = `Error: ${errorMessage.replace(/[<>]/g, '')}`;    p2.style.cssText = 'color: #ef4444; margin-bottom: 2rem; font-family: monospace;';    const button = document.createElement('button');    button.textContent = 'Retry';    button.style.cssText = `      background: #8b5cf6;      color: white;      border: none;      padding: 12px 24px;      border-radius: 6px;      cursor: pointer;      font-size: 1rem;      transition: background 0.3s ease;    `;    button.onmouseover = () => button.style.background = '#7c3aed';    button.onmouseout = () => button.style.background = '#8b5cf6';    button.onclick = () => window.location.reload();    container.appendChild(h1);    container.appendChild(p1);    container.appendChild(p2);    container.appendChild(button);    root.appendChild(container);  }, []);  const handleError = useCallback((error: ErrorEvent) => {    createErrorUI(error.error || new Error('Unknown error'));    onError?.(error.error);  }, [createErrorUI, onError]);  const handleTimeout = useCallback(() => {    createErrorUI(new Error('Application loading timeout. Please check your connection and try again.'));    onTimeout?.();  }, [createErrorUI, onTimeout]);  useEffect(() => {    // Set up error handler    errorHandlerRef.current = handleError;    window.addEventListener('error', handleError);    // Set up timeout    timeoutRef.current = setTimeout(handleTimeout, timeout);    // Cleanup function    return () => {      if (errorHandlerRef.current) {        window.removeEventListener('error', errorHandlerRef.current);      }      if (timeoutRef.current) {        clearTimeout(timeoutRef.current);      }    };  }, [handleError, handleTimeout, timeout]);  return {    createErrorUI,    clearTimeout: () => {      if (timeoutRef.current) {        clearTimeout(timeoutRef.current);      }    },  };}