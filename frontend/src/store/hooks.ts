/** * @fileoverview Production-ready typed Redux hooks with enhanced functionality * @version 1.0.0 * @author CryptoPulse Team */import { useDispatch, useSelector, TypedUseSelectorHook, useStore } from 'react-redux';import { useCallback, useMemo, useRef, useEffect, useState } from 'react';import { shallowEqual } from 'react-redux';import type { RootState, AppDispatch } from './index';import { performanceMonitor } from './utils/performance';// ============================================================================// CORE TYPED HOOKS// ============================================================================/** * Typed useDispatch hook with enhanced functionality * @returns Typed dispatch function * @example * ```typescript * const dispatch = useAppDispatch(); * dispatch(loginUser({ username: 'user', password: 'pass' })); * ``` */export const useAppDispatch = (): AppDispatch => {  const dispatch = useDispatch<AppDispatch>();  // Wrap dispatch with performance monitoring in development  if (process.env.NODE_ENV === 'development') {    return useCallback((action: any) => {      const start = performance.now();      const result = dispatch(action);      const end = performance.now();      performanceMonitor.recordMetric('dispatch_time', end - start);      return result;    }, [dispatch]) as AppDispatch;  }  return dispatch;};/** * Typed useSelector hook with enhanced functionality * @returns Typed selector hook * @example * ```typescript * const user = useAppSelector(selectCurrentUser); * const isAuthenticated = useAppSelector(selectIsAuthenticated); * ``` */export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;// ============================================================================// ENHANCED SELECTOR HOOKS// ============================================================================/** * Memoized selector hook with shallow equality check * @param selector - Selector function * @returns Memoized selector result * @example * ```typescript * const user = useMemoizedSelector(selectCurrentUser); * ``` */export const useMemoizedSelector = <T>(  selector: (state: RootState) => T): T => {  return useAppSelector(selector, shallowEqual);};/** * Selector hook with custom equality function * @param selector - Selector function * @param equalityFn - Custom equality function * @returns Selector result * @example * ```typescript * const user = useCustomSelector(selectCurrentUser, (a, b) => a?.id === b?.id); * ``` */export const useCustomSelector = <T>(  selector: (state: RootState) => T,  equalityFn?: (a: T, b: T) => boolean): T => {  return useAppSelector(selector, equalityFn);};/** * Selector hook with performance monitoring * @param selector - Selector function * @param name - Selector name for monitoring * @returns Selector result with performance tracking * @example * ```typescript * const user = useMonitoredSelector(selectCurrentUser, 'current_user'); * ``` */export const useMonitoredSelector = <T>(  selector: (state: RootState) => T,  name: string): T => {  const memoizedSelector = useMemo(() => {    return (state: RootState) => {      const start = performance.now();      const result = selector(state);      const end = performance.now();      performanceMonitor.recordMetric(`selector_${name}`, end - start);      return result;    };  }, [selector, name]);  return useAppSelector(memoizedSelector);};// ============================================================================// SPECIALIZED HOOKS// ============================================================================/** * Hook to get the entire store (use sparingly) * @returns Store instance * @example * ```typescript * const store = useAppStore(); * const state = store.getState(); * ``` */export const useAppStore = () => {  return useStore<RootState>();};/** * Hook to get multiple selector values efficiently * @param selectors - Array of selector functions * @returns Array of selector results * @example * ```typescript * const [user, isAuthenticated, loading] = useMultipleSelectors([ *   selectCurrentUser, *   selectIsAuthenticated, *   selectAuthLoading * ]); * ``` */export const useMultipleSelectors = <T extends readonly ((state: RootState) => any)[]>(  selectors: T): { [K in keyof T]: ReturnType<T[K]> } => {  return useAppSelector(    useCallback((state: RootState) => selectors.map(selector => selector(state)) as any, [selectors]),    shallowEqual  );};/** * Hook to get a selector value with error handling * @param selector - Selector function * @param fallback - Fallback value * @returns Selector result or fallback * @example * ```typescript * const user = useSafeSelector(selectCurrentUser, null); * ``` */export const useSafeSelector = <T>(  selector: (state: RootState) => T,  fallback: T): T => {  try {    return useAppSelector(selector);  } catch (error) {    return fallback;  }};// ============================================================================// CONDITIONAL HOOKS// ============================================================================/** * Hook to conditionally use a selector * @param condition - Condition to check * @param selector - Selector function * @param fallback - Fallback value * @returns Selector result or fallback * @example * ```typescript * const user = useConditionalSelector(isAuthenticated, selectCurrentUser, null); * ``` */export const useConditionalSelector = <T>(  condition: boolean,  selector: (state: RootState) => T,  fallback: T): T => {  return useMemo(() => {    if (!condition) return fallback;    return selector;  }, [condition, selector, fallback]);};// ============================================================================// PERFORMANCE HOOKS// ============================================================================/** * Hook to track selector performance * @param selector - Selector function * @param name - Selector name * @returns Object with selector result and performance metrics * @example * ```typescript * const { data: user, metrics } = useTrackedSelector(selectCurrentUser, 'current_user'); * ``` */export const useTrackedSelector = <T>(  selector: (state: RootState) => T,  name: string): { data: T; metrics: { renderTime: number; recomputations: number } } => {  const renderCount = useRef(0);  const startTime = useRef(performance.now());  const result = useAppSelector(selector);  useEffect(() => {    renderCount.current += 1;    const endTime = performance.now();    const renderTime = endTime - startTime.current;    performanceMonitor.recordMetric(`selector_${name}_render_time`, renderTime);    performanceMonitor.recordMetric(`selector_${name}_recomputations`, renderCount.current);    startTime.current = performance.now();  });  return {    data: result,    metrics: {      renderTime: performance.now() - startTime.current,      recomputations: renderCount.current    }  };};// ============================================================================// ERROR BOUNDARY HOOKS// ============================================================================/** * Hook to safely access store state with error boundary * @param selector - Selector function * @param errorHandler - Error handler function * @returns Selector result or null on error * @example * ```typescript * const user = useSafeStoreAccess(selectCurrentUser, (error) => { *   
 * }); * ``` */export const useSafeStoreAccess = <T>(  selector: (state: RootState) => T,  errorHandler?: (error: Error) => void): T | null => {  try {    return useAppSelector(selector);  } catch (error) {    if (errorHandler) {      errorHandler(error as Error);    } else {    }    return null;  }};// ============================================================================// DEVELOPMENT HOOKS// ============================================================================/** * Hook for development debugging (only available in development) * @param selector - Selector function * @param name - Selector name for debugging * @returns Selector result with debug information */export const useDebugSelector = <T>(  selector: (state: RootState) => T,  name: string): T => {  if (process.env.NODE_ENV !== 'development') {    return useAppSelector(selector);  }  const result = useAppSelector(selector);  useEffect(() => {  }, [result, name]);  return result;};// ============================================================================// UTILITY HOOKS// ============================================================================/** * Hook to check if a selector has changed * @param selector - Selector function * @returns Object with current value and previous value * @example * ```typescript * const { current, previous, hasChanged } = useSelectorChange(selectCurrentUser); * ``` */export const useSelectorChange = <T>(  selector: (state: RootState) => T): { current: T; previous: T | undefined; hasChanged: boolean } => {  const current = useAppSelector(selector);  const previous = useRef<T>();  const hasChanged = previous.current !== current;  useEffect(() => {    previous.current = current;  });  return { current, previous: previous.current, hasChanged };};/** * Hook to debounce selector updates * @param selector - Selector function * @param delay - Debounce delay in milliseconds * @returns Debounced selector result * @example * ```typescript * const user = useDebouncedSelector(selectCurrentUser, 300); * ``` */export const useDebouncedSelector = <T>(  selector: (state: RootState) => T,  delay: number): T => {  const [debouncedValue, setDebouncedValue] = useState<T>();  const currentValue = useAppSelector(selector);  useEffect(() => {    const timer = setTimeout(() => {      setDebouncedValue(currentValue);    }, delay);    return () => clearTimeout(timer);  }, [currentValue, delay]);  return debouncedValue ?? currentValue;};// ============================================================================// EXPORTS// ============================================================================export {  // Re-export React hooks for convenience  useCallback,  useMemo,  useEffect,  useRef,  useState} from 'react';export {  // Re-export Redux hooks  shallowEqual} from 'react-redux';