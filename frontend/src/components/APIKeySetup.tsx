import { Shield, Key, Eye, EyeOff, CheckCircle, AlertTriangle } from 'lucide-react';
import React, { useState, useCallback, useEffect } from 'react';
import { secureStorage, validateAPIKey, validateAPISecret, apiRateLimiter } from '../lib/secureStorage';

import { Alert, AlertDescription } from './ui/alert';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';import { Input } from './ui/input';import { Label } from './ui/label';interface APIKeyCredentials {  apiKey: string;  apiSecret: string;  exchange: string;  timestamp: number;  isValidated: boolean;}export default function APIKeySetup() {  const [apiKey, setApiKey] = useState('');  const [apiSecret, setApiSecret] = useState('');  const [exchange, setExchange] = useState('binance');  const [showSecret, setShowSecret] = useState(false);  const [isLoading, setIsLoading] = useState(false);  const [isValidating, setIsValidating] = useState(false);  const [error, setError] = useState('');  const [success, setSuccess] = useState('');  const [validationErrors, setValidationErrors] = useState<{    apiKey?: string;    apiSecret?: string;  }>({});  // Load existing credentials on mount  useEffect(() => {    const loadExistingCredentials = async () => {      try {        const credentials = await secureStorage.get('api-credentials');        if (credentials) {          setApiKey(credentials.apiKey || '');          setExchange(credentials.exchange || 'binance');          // Don't load secret for security        }      } catch (error) {      }    };    loadExistingCredentials();  }, []);  // Real-time validation  const validateInputs = useCallback(() => {    const keyValidation = validateAPIKey(apiKey);    const secretValidation = validateAPISecret(apiSecret);    const errors: { apiKey?: string; apiSecret?: string } = {};    if (apiKey && !keyValidation.isValid) {      errors.apiKey = keyValidation.error;    }    if (apiSecret && !secretValidation.isValid) {      errors.apiSecret = secretValidation.error;    }    setValidationErrors(errors);    return Object.keys(errors).length === 0;  }, [apiKey, apiSecret]);  // Validate inputs on change  useEffect(() => {    if (apiKey || apiSecret) {      validateInputs();    }  }, [apiKey, apiSecret, validateInputs]);  const testConnection = async (credentials: APIKeyCredentials): Promise<boolean> => {    try {      // Simulate API connection test      const response = await fetch('/api/test-connection', {        method: 'POST',        headers: {          'Content-Type': 'application/json',          'Authorization': `Bearer ${localStorage.getItem('cryptopulse-session') || ''}`,        },        body: JSON.stringify({          exchange: credentials.exchange,          apiKey: credentials.apiKey,        }),      });      if (!response.ok) {        throw new Error(`Connection test failed: ${response.statusText}`);      }      const result = await response.json();      return result.success;    } catch (error) {      return false;    }  };  const handleSubmit = async (e: React.FormEvent) => {    e.preventDefault();    setError('');    setSuccess('');    // Rate limiting check    if (!apiRateLimiter.isAllowed('api-key-setup')) {      setError('Too many attempts. Please wait 15 minutes before trying again.');      return;    }    // Validate inputs    if (!validateInputs()) {      setError('Please fix validation errors before submitting.');      return;    }    if (!apiKey || !apiSecret) {      setError('Please enter both API key and secret');      return;    }    setIsLoading(true);    setIsValidating(true);    try {      const credentials: APIKeyCredentials = {        apiKey: apiKey.trim(),        apiSecret: apiSecret.trim(),        exchange,        timestamp: Date.now(),        isValidated: false,      };      // Test connection first      const connectionValid = await testConnection(credentials);      if (!connectionValid) {        throw new Error('Failed to connect to exchange. Please verify your API keys.');      }      // Store credentials securely      await secureStorage.set('api-credentials', credentials);      // Store a flag that keys are validated      await secureStorage.set('api-keys-validated', true);      setSuccess('API keys saved and validated successfully!');      // Reset form      setApiKey('');      setApiSecret('');      setValidationErrors({});    } catch (err) {      const errorMessage = err instanceof Error ? err.message : 'Failed to save API keys';      setError(errorMessage);      // Reset rate limiter on error      apiRateLimiter.reset('api-key-setup');    } finally {      setIsLoading(false);      setIsValidating(false);    }  };  return (    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4">      <div className="max-w-2xl mx-auto">        <Card className="bg-slate-800/90 border-slate-700 text-white">          <CardHeader className="text-center">            <div className="flex justify-center mb-4">              <div className="p-3 bg-blue-500/20 rounded-full">                <Shield className="h-8 w-8 text-blue-400" />              </div>            </div>            <CardTitle className="text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">              API Key Setup            </CardTitle>            <p className="text-slate-400 mt-2">              Connect your exchange account to start trading            </p>          </CardHeader>          <CardContent className="space-y-6">            <Alert className="bg-yellow-500/10 border-yellow-500/20">              <Key className="h-4 w-4" />              <AlertDescription className="text-yellow-400">                <strong>Security Notice:</strong> Your API keys are encrypted and stored securely.                We never have access to your funds or trading accounts.              </AlertDescription>            </Alert>            <form className="space-y-6" onSubmit={handleSubmit}>              <div className="space-y-4">                {/* Exchange Selection */}                <div className="space-y-2">                  <Label className="text-slate-300" htmlFor="exchange">Exchange</Label>                  <select                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"                    id="exchange"                    onChange={(e) => setExchange(e.target.value)}                    value={exchange}                  >                    <option value="binance">Binance</option>                    <option value="wazirx">WazirX</option>                    <option value="coindcx">CoinDCX</option>                    <option value="delta">Delta Exchange</option>                    <option value="coinbase">Coinbase Pro</option>                  </select>                </div>                {/* API Key Input */}                <div className="space-y-2">                  <Label className="text-slate-300" htmlFor="api-key">                    API Key                  {validationErrors.apiKey && (                    <span className="text-red-400 ml-2 text-sm">*</span>                  )}                  </Label>                  <div className="relative">                    <Key className="absolute left-3 top-3 h-4 w-4 text-slate-400" />                    <Input                      aria-describedby={validationErrors.apiKey ? 'api-key-error' : undefined}                      className={`pl-10 bg-slate-700 border-slate-600 text-white ${                        validationErrors.apiKey ? 'border-red-500' : ''                      }`}                      id="api-key"                      onChange={(e) => setApiKey(e.target.value)}                      placeholder="Enter your API key"                      required                      type="text"                      value={apiKey}                    />                    {apiKey && !validationErrors.apiKey && (                      <CheckCircle className="absolute right-3 top-3 h-4 w-4 text-green-400" />                    )}                  </div>                  {validationErrors.apiKey && (                    <p className="text-red-400 text-sm flex items-center" id="api-key-error">                      <AlertTriangle className="h-3 w-3 mr-1" />                      {validationErrors.apiKey}                    </p>                  )}                </div>                {/* API Secret Input */}                <div className="space-y-2">                  <Label className="text-slate-300" htmlFor="api-secret">                    API Secret                  {validationErrors.apiSecret && (                    <span className="text-red-400 ml-2 text-sm">*</span>                  )}                  </Label>                  <div className="relative">                    <Key className="absolute left-3 top-3 h-4 w-4 text-slate-400" />                    <Input                      aria-describedby={validationErrors.apiSecret ? 'api-secret-error' : undefined}                      className={`pl-10 pr-10 bg-slate-700 border-slate-600 text-white ${                        validationErrors.apiSecret ? 'border-red-500' : ''                      }`}                      id="api-secret"                      onChange={(e) => setApiSecret(e.target.value)}                      placeholder="Enter your API secret"                      required                      type={showSecret ? 'text' : 'password'}                      value={apiSecret}                    />                    <button                      aria-label={showSecret ? 'Hide API secret' : 'Show API secret'}                      className="absolute right-3 top-3 text-slate-400 hover:text-slate-300"                      onClick={() => setShowSecret(!showSecret)}                      type="button"                    >                      {showSecret ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}                    </button>                    {apiSecret && !validationErrors.apiSecret && (                      <CheckCircle className="absolute right-8 top-3 h-4 w-4 text-green-400" />                    )}                  </div>                  {validationErrors.apiSecret && (                    <p className="text-red-400 text-sm flex items-center" id="api-secret-error">                      <AlertTriangle className="h-3 w-3 mr-1" />                      {validationErrors.apiSecret}                    </p>                  )}                </div>              </div>              {error && (                <Alert className="bg-red-500/10 border-red-500/20">                  <AlertDescription className="text-red-400">                    {error}                  </AlertDescription>                </Alert>              )}              {success && (                <Alert className="bg-green-500/10 border-green-500/20">                  <CheckCircle className="h-4 w-4" />                  <AlertDescription className="text-green-400">                    {success}                  </AlertDescription>                </Alert>              )}              <div className="space-y-3">                <Button                  className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"                  disabled={isLoading || isValidating || Object.keys(validationErrors).length > 0}                  type="submit"                >                  {isValidating ? (                    <>                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />                      Validating Connection...                    </>                  ) : isLoading ? (                    <>                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />                      Saving...                    </>                  ) : (                    <>                      <Shield className="h-4 w-4 mr-2" />                      Save & Validate API Keys                    </>                  )}                </Button>                {isValidating && (                  <div className="text-center">                    <p className="text-sm text-blue-400">                      Testing connection to {exchange}...                    </p>                  </div>                )}              </div>            </form>            <div className="bg-slate-700/50 rounded-lg p-4">              <h3 className="font-semibold text-white mb-2">How to get your API keys:</h3>              <ol className="text-sm text-slate-300 space-y-1">                <li>1. Log in to your exchange account</li>                <li>2. Go to API management section</li>                <li>3. Create a new API key with trading permissions</li>                <li>4. Copy the API key and secret</li>                <li>5. Paste them in the form above</li>              </ol>            </div>          </CardContent>        </Card>      </div>    </div>  );}