const crypto = require('crypto');

import { createRoot } from 'react-dom/client';import { StrictMode } from 'react';import App from './App';// Production error handling configurationconst ERROR_HANDLER_CONFIG = {  timeout: 10000, // 10 seconds timeout  onError: (error: Error) => {    if (import.meta.env.PROD) {      // Production error reporting - integrate with your preferred service      // Examples: Sentry, LogRocket, Bugsnag, etc.      // Example Sentry integration:      // Sentry.captureException(error, {      //   tags: {      //     section: 'app-initialization',      //   },      //   extra: {      //     timestamp: new Date().toISOString(),      //     userAgent: navigator.userAgent,      //     url: window.location.href,      //   },      // });      // Fallback: Send to your own error tracking endpoint      fetch('/api/errors/initialization', {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify({          error: {            message: error.message,            stack: error.stack,            name: error.name,          },          timestamp: new Date().toISOString(),          userAgent: navigator.userAgent,          url: window.location.href,          userId: localStorage.getItem('userId') || 'anonymous',        }),      }).catch(() => {        // Silent fail for error reporting      });    } else {    }  },  onTimeout: () => {    if (import.meta.env.PROD) {      // Production timeout handling      // Report timeout to analytics      fetch('/api/analytics/timeout', {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify({          type: 'app-initialization-timeout',          timestamp: new Date().toISOString(),          userAgent: navigator.userAgent,          url: window.location.href,        }),      }).catch(() => {        // Silent fail for analytics      });    } else {    }  }};// Production error UI creator with enhanced security and UXfunction createErrorUI(error: Error): void {  const rootElement = document.getElementById('root');  if (!rootElement) return;  // Sanitize error message to prevent XSS  const sanitizeMessage = (message: string): string => {    return message      .replace(/[<>]/g, '')      .substring(0, 500) // Limit length      .replace(/\n/g, '<br>');  };  // Check if we're in production to determine error detail level  const isProduction = import.meta.env.PROD;  const showErrorDetails = !isProduction;  // Create error UI safely without innerHTML  const errorContainer = document.createElement('div');  errorContainer.style.cssText = `    display: flex;    flex-direction: column;    align-items: center;      justify-content: center;      min-height: 100vh;      padding: 2rem;      text-align: center;      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;      background: #f8fafc;      color: #1e293b;      line-height: 1.6;    ">      <div style="        max-width: 600px;        width: 100%;        background: white;        border-radius: 0.75rem;        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);        padding: 2rem;        border: 1px solid #e5e7eb;      ">        <div style="          width: 4rem;          height: 4rem;          background: #fef2f2;          border-radius: 50%;          display: flex;          align-items: center;          justify-content: center;          margin: 0 auto 1.5rem;        ">          <svg style="width: 2rem; height: 2rem; color: #dc2626;" fill="none" viewBox="0 0 24 24" stroke="currentColor">            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />          </svg>        </div>        <h1 style="          color: #dc2626;          margin-bottom: 1rem;          font-size: 1.5rem;          font-weight: 600;        ">          ${isProduction ? 'Something went wrong' : 'Application Error'}        </h1>        <p style="          margin-bottom: 2rem;          color: #6b7280;          font-size: 1rem;        ">          ${isProduction             ? 'We apologize for the inconvenience. Please try refreshing the page or contact support if the problem persists.'             : sanitizeMessage(error.message)          }        </p>        <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">          <button             onclick="window.location.reload()"             style="              background: #3b82f6;              color: white;              border: none;              padding: 0.75rem 1.5rem;              border-radius: 0.5rem;              cursor: pointer;              font-size: 1rem;              font-weight: 500;              transition: background-color 0.2s;            "            onmouseover="this.style.background='#2563eb'"            onmouseout="this.style.background='#3b82f6'"          >            Reload Application          </button>          <button             onclick="window.location.href='/'"            style="              background: #6b7280;              color: white;              border: none;              padding: 0.75rem 1.5rem;              border-radius: 0.5rem;              cursor: pointer;              font-size: 1rem;              font-weight: 500;              transition: background-color 0.2s;            "            onmouseover="this.style.background='#4b5563'"            onmouseout="this.style.background='#6b7280'"          >            Go Home          </button>        </div>        ${showErrorDetails ? `          <details style="margin-top: 2rem; text-align: left;">            <summary style="              cursor: pointer;              color: #6b7280;              font-size: 0.875rem;              margin-bottom: 1rem;            ">              Error Details (Development)            </summary>            <pre style="              background: #f3f4f6;              padding: 1rem;              border-radius: 0.5rem;              font-size: 0.75rem;              color: #374151;              overflow: auto;              white-space: pre-wrap;              word-break: break-word;            ">${sanitizeMessage(error.stack || error.message)}</pre>          </details>        ` : ''}        <div style="          margin-top: 2rem;          padding-top: 1rem;          border-top: 1px solid #e5e7eb;          font-size: 0.75rem;          color: #9ca3af;        ">          Error ID: ${Date.now().toString(36)}-${(crypto.randomBytes(4).readUInt32BE(0) / 0xffffffff).toString(36).substr(2, 9)}        </div>      </div>    </div>  `;}// Performance monitoring utilitiesconst performanceMonitor = {  startTime: performance.now(),  mark: (name: string) => {    performance.mark(name);  },  measure: (name: string, startMark: string, endMark?: string) => {    try {      if (endMark) {        performance.measure(name, startMark, endMark);      } else {        performance.measure(name, startMark);      }      const measure = performance.getEntriesByName(name)[0];      if (measure) {        // Report performance metrics        if (import.meta.env.PROD) {          fetch('/api/analytics/performance', {            method: 'POST',            headers: {              'Content-Type': 'application/json',            },            body: JSON.stringify({              metric: name,              value: measure.duration,              timestamp: new Date().toISOString(),              url: window.location.href,              userAgent: navigator.userAgent,            }),          }).catch(() => {            // Silent fail for analytics          });        } else {          console.log(`Performance: ${name} took ${measure.duration.toFixed(2)}ms`);        }      }    } catch (error) {    }  },  getTotalTime: () => {    return performance.now() - performanceMonitor.startTime;  }};// Initialize the app with proper production error handling and performance monitoringfunction initializeApp(): void {  // Mark initialization start  performanceMonitor.mark('app-init-start');  const rootElement = document.getElementById('root');  if (!rootElement) {    const error = new Error('Root element not found. Please check the HTML structure.');    ERROR_HANDLER_CONFIG.onError(error);    createErrorUI(error);    return;  }  try {    // Mark React root creation    performanceMonitor.mark('react-root-create-start');    const root = createRoot(rootElement);    performanceMonitor.mark('react-root-create-end');    performanceMonitor.measure('react-root-creation', 'react-root-create-start', 'react-root-create-end');    // Mark React render start    performanceMonitor.mark('react-render-start');    root.render(      <StrictMode>        <App />      </StrictMode>    );    // Mark React render end    performanceMonitor.mark('react-render-end');    performanceMonitor.measure('react-render', 'react-render-start', 'react-render-end');    // Mark total initialization time    performanceMonitor.mark('app-init-end');    performanceMonitor.measure('app-total-init', 'app-init-start', 'app-init-end');    // Report total initialization time    const totalTime = performanceMonitor.getTotalTime();    if (import.meta.env.PROD) {      fetch('/api/analytics/initialization', {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify({          totalInitTime: totalTime,          timestamp: new Date().toISOString(),          url: window.location.href,          userAgent: navigator.userAgent,          connection: (navigator as any).connection?.effectiveType || 'unknown',          memoryUsage: (performance as any).memory ? {            used: (performance as any).memory.usedJSHeapSize,            total: (performance as any).memory.totalJSHeapSize,            limit: (performance as any).memory.jsHeapSizeLimit,          } : null,        }),      }).catch(() => {        // Silent fail for analytics      });    }    if (import.meta.env.DEV) {      console.log(`App rendered successfully in ${totalTime.toFixed(2)}ms`);    }    // Set up timeout monitoring    const timeoutId = setTimeout(() => {      ERROR_HANDLER_CONFIG.onTimeout();    }, ERROR_HANDLER_CONFIG.timeout);    // Clear timeout if app loads successfully    const clearTimeoutOnLoad = () => {      clearTimeout(timeoutId);      window.removeEventListener('load', clearTimeoutOnLoad);    };    window.addEventListener('load', clearTimeoutOnLoad);  } catch (error) {    const appError = error instanceof Error ? error : new Error(String(error));    ERROR_HANDLER_CONFIG.onError(appError);    createErrorUI(appError);  }}// Set up global error handlers for unhandled errorswindow.addEventListener('error', (event) => {  ERROR_HANDLER_CONFIG.onError(event.error);});window.addEventListener('unhandledrejection', (event) => {  ERROR_HANDLER_CONFIG.onError(new Error(event.reason));});// Start the applicationinitializeApp();