import React, { lazy, Suspense, useState } from 'react';import { Routes, Route, Navigate } from 'react-router-dom';import { ErrorBoundary } from 'react-error-boundary';import { useAuth } from '../contexts/AuthContext';// Lazy load components for code splittingconst SplashScreen = lazy(() => import('../components/SplashScreen'));const AuthScreen = lazy(() => import('../components/AuthScreen'));const DisclaimerScreen = lazy(() => import('../components/DisclaimerScreen'));const WorldClassDashboard = lazy(() => import('../components/WorldClassDashboard'));const Dashboard = lazy(() => import('../components/Dashboard'));const APIKeySetup = lazy(() => import('../components/APIKeySetup'));const CryptoPairSelection = lazy(() => import('../components/CryptoPairSelection'));const BotSetup = lazy(() => import('../components/BotSetup'));const TradeExecution = lazy(() => import('../components/TradeExecution'));const Backtesting = lazy(() => import('../components/Backtesting'));const AlertsSettings = lazy(() => import('../components/AlertsSettings'));const AIAutomation = lazy(() => import('../components/AIAutomation'));const MonitoringDashboard = lazy(() => import('../components/MonitoringDashboard'));const PerformanceAnalytics = lazy(() => import('../components/PerformanceAnalytics'));const EndToEndAutomation = lazy(() => import('../components/EndToEndAutomation'));const ExchangeIntegration = lazy(() => import('../components/ExchangeIntegration'));const AIAssistant = lazy(() => import('../components/AIAssistant'));const AutomationDashboard = lazy(() => import('../components/AutomationDashboard'));const EnhancedTradeConfirmation = lazy(() => import('../components/EnhancedTradeConfirmation'));const EnhancedNotificationCenter = lazy(() => import('../components/EnhancedNotificationCenter'));const BalanceDashboard = lazy(() => import('../components/BalanceDashboard'));const SubscriptionManagement = lazy(() => import('../components/SubscriptionManagement'));const CashfreePayment = lazy(() => import('../components/CashfreePayment'));const PaymentSuccess = lazy(() => import('../components/PaymentSuccess'));const TrialProtectedRoute = lazy(() => import('../components/TrialProtectedRoute'));const ErrorFallback = lazy(() => import('../components/ErrorFallback'));// Loading componentconst LoadingFallback = () => (  <div className="flex items-center justify-center min-h-screen">    <div className="loading"></div>  </div>);// Error boundary for routesconst RouteErrorBoundary = ({ children }: { children: React.ReactNode }) => (  <ErrorBoundary    fallbackRender={({ error, resetErrorBoundary }) => (      <div className="error p-4 m-4 rounded">        <h2>Something went wrong:</h2>        <pre>{error?.message}</pre>        <button           onClick={resetErrorBoundary}          className="btn-primary mt-2"        >          Try again        </button>      </div>    )}  >    {children}  </ErrorBoundary>);// Protected Route Componentfunction ProtectedRoute({ children }: { children: React.ReactNode }) {  const { user, loading } = useAuth();  if (loading) {    return <SplashScreen />;  }  if (!user) {    return <Navigate to="/auth" replace />;  }  return <>{children}</>;}// Wrapper components for components that need propsfunction AIAssistantWrapper() {  const [isOpen, setIsOpen] = useState(false);  return (    <AIAssistant       isOpen={isOpen}       onClose={() => setIsOpen(false)}     />  );}function TradeConfirmationWrapper() {  // Use environment variables instead of mock data  const mockSignal = {    pair: 'BTC/USDT',    action: 'BUY' as const,    entry: 45000,    stopLoss: 43000,    takeProfit: 47000,    confidence: 85,    timestamp: new Date().toISOString()  };  // Get API keys from environment or secure storage  const apiKeys = {    marketDataKey: import.meta.env.VITE_MARKET_DATA_KEY || '',    marketDataSecret: import.meta.env.VITE_MARKET_DATA_SECRET || '',    tradeExecutionKey: import.meta.env.VITE_TRADE_EXECUTION_KEY || '',    tradeExecutionSecret: import.meta.env.VITE_TRADE_EXECUTION_SECRET || '',    exchange: import.meta.env.VITE_DEFAULT_EXCHANGE || 'wazirx'  };  const handleConfirm = (confirmed: boolean, tradeData?: unknown) => {    // Trade confirmation logic  };  const handleClose = () => {    // Trade confirmation close logic  };  return (    <EnhancedTradeConfirmation       signal={mockSignal}      userApiKeys={apiKeys}      onConfirm={handleConfirm}      onClose={handleClose}    />  );}// Main Routes Componentexport function AppRoutes() {  return (    <RouteErrorBoundary>      <Suspense fallback={<LoadingFallback />}>        <Routes>          {/* Public Routes */}          <Route path="/auth" element={<AuthScreen />} />          <Route path="/disclaimer" element={<DisclaimerScreen />} />          {/* Protected Routes */}          <Route path="/" element={            <ProtectedRoute>              <WorldClassDashboard />            </ProtectedRoute>          } />          <Route path="/dashboard" element={            <ProtectedRoute>              <TrialProtectedRoute>                <Dashboard />              </TrialProtectedRoute>            </ProtectedRoute>          } />          <Route path="/api-keys" element={            <ProtectedRoute>              <APIKeySetup />            </ProtectedRoute>          } />          <Route path="/crypto-pairs" element={            <ProtectedRoute>              <CryptoPairSelection />            </ProtectedRoute>          } />          <Route path="/bot-setup" element={            <ProtectedRoute>              <BotSetup />            </ProtectedRoute>          } />          <Route path="/trade-execution" element={            <ProtectedRoute>              <TradeExecution />            </ProtectedRoute>          } />          <Route path="/backtesting" element={            <ProtectedRoute>              <Backtesting />            </ProtectedRoute>          } />          <Route path="/alerts-settings" element={            <ProtectedRoute>              <AlertsSettings />            </ProtectedRoute>          } />          <Route path="/ai-automation" element={            <ProtectedRoute>              <AIAutomation />            </ProtectedRoute>          } />          <Route path="/monitoring" element={            <ProtectedRoute>              <MonitoringDashboard />            </ProtectedRoute>          } />          <Route path="/performance" element={            <ProtectedRoute>              <PerformanceAnalytics />            </ProtectedRoute>          } />          <Route path="/end-to-end-automation" element={            <ProtectedRoute>              <EndToEndAutomation />            </ProtectedRoute>          } />          <Route path="/exchange-integration" element={            <ProtectedRoute>              <ExchangeIntegration />            </ProtectedRoute>          } />          <Route path="/ai-assistant" element={            <ProtectedRoute>              <AIAssistantWrapper />            </ProtectedRoute>          } />          <Route path="/automation-dashboard" element={            <ProtectedRoute>              <AutomationDashboard />            </ProtectedRoute>          } />          <Route path="/trade-confirmation" element={            <ProtectedRoute>              <TradeConfirmationWrapper />            </ProtectedRoute>          } />          <Route path="/notifications" element={            <ProtectedRoute>              <EnhancedNotificationCenter />            </ProtectedRoute>          } />          <Route path="/balance" element={            <ProtectedRoute>              <BalanceDashboard />            </ProtectedRoute>          } />          <Route path="/subscription" element={            <ProtectedRoute>              <SubscriptionManagement />            </ProtectedRoute>          } />          <Route path="/payment" element={            <ProtectedRoute>              <CashfreePayment />            </ProtectedRoute>          } />          <Route path="/payment-success" element={            <ProtectedRoute>              <PaymentSuccess />            </ProtectedRoute>          } />          {/* Catch all route */}          <Route path="*" element={<Navigate to="/" replace />} />        </Routes>      </Suspense>    </RouteErrorBoundary>  );}