#!/usr/bin/env sh
# Production-ready commit message validation
# Ensures commit messages follow conventional commit format

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}üîç Validating commit message...${NC}"

# Get commit message
commit_msg=$(cat "$1")

# Check if commit message is empty
if [ -z "$commit_msg" ]; then
  echo "${RED}‚ùå Commit message cannot be empty${NC}"
  exit 1
fi

# Check commit message length (minimum 10 characters, maximum 100)
msg_length=${#commit_msg}
if [ $msg_length -lt 10 ]; then
  echo "${RED}‚ùå Commit message too short (minimum 10 characters)${NC}"
  exit 1
fi

if [ $msg_length -gt 100 ]; then
  echo "${YELLOW}‚ö†Ô∏è Commit message too long (${msg_length} characters, recommended max 100)${NC}"
fi

# Check for conventional commit format (optional but recommended)
if echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
  echo "${GREEN}‚úÖ Conventional commit format detected${NC}"
else
  echo "${YELLOW}‚ö†Ô∏è Consider using conventional commit format: type(scope): description${NC}"
  echo "${YELLOW}   Examples: feat: add new feature, fix: resolve bug, docs: update readme${NC}"
fi

# Check for prohibited words
prohibited_words="WIP|wip|TODO|FIXME|HACK|XXX"
if echo "$commit_msg" | grep -qiE "($prohibited_words)"; then
  echo "${YELLOW}‚ö†Ô∏è Commit message contains work-in-progress indicators${NC}"
fi

# Check for merge commits (allow them)
if echo "$commit_msg" | grep -qE "^Merge|^Revert"; then
  echo "${GREEN}‚úÖ Merge/revert commit detected, skipping validation${NC}"
  exit 0
fi

echo "${GREEN}‚úÖ Commit message validation passed${NC}"
