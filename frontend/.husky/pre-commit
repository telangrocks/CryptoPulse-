#!/usr/bin/env sh
# Production-ready pre-commit hook for CryptoPulse Frontend
# Cross-platform compatible with enhanced error handling

# Exit on first error
set -e

# Colors for output (cross-platform)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}üîç Running production pre-commit checks...${NC}"

# Check if we're in CI environment
if [ -n "$CI" ]; then
  echo "${YELLOW}CI environment detected, skipping pre-commit hooks${NC}"
  exit 0
fi

# Function to check if command exists (cross-platform)
command_exists() {
  if command -v "$1" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

# Function to run command with timeout and error handling
run_check() {
  local name="$1"
  local cmd="$2"
  local timeout="${3:-300}" # Default 5 minute timeout
  
  echo "${BLUE}üìù $name...${NC}"
  
  # Check if command exists
  if ! command_exists "$(echo "$cmd" | cut -d' ' -f1)"; then
    echo "${YELLOW}‚ö†Ô∏è Command not found, skipping $name${NC}"
    return 0
  fi
  
  # Run command with timeout
  if timeout "$timeout" sh -c "$cmd" 2>/dev/null; then
    echo "${GREEN}‚úÖ $name passed${NC}"
  else
    local exit_code=$?
    if [ $exit_code -eq 124 ]; then
      echo "${RED}‚ùå $name failed - timeout after ${timeout}s${NC}"
    else
      echo "${RED}‚ùå $name failed with exit code $exit_code${NC}"
    fi
    exit 1
  fi
}

# Function to check file permissions
check_file_permissions() {
  local file="$1"
  if [ -f "$file" ] && [ ! -r "$file" ]; then
    echo "${RED}‚ùå Cannot read file: $file${NC}"
    exit 1
  fi
}

# Validate required files exist
check_file_permissions "package.json"
check_file_permissions ".lintstagedrc.json"

# 1. Lint staged files (if lint-staged is available)
if command_exists npx && [ -f ".lintstagedrc.json" ]; then
  run_check "Linting staged files" "npx lint-staged" 120
else
  echo "${YELLOW}‚ö†Ô∏è lint-staged not configured, skipping...${NC}"
fi

# 2. Type checking
run_check "TypeScript type checking" "npm run typecheck" 180

# 3. Run tests (skip in pre-commit for speed, run in CI)
if [ -n "$RUN_TESTS" ]; then
  run_check "Running tests" "npm test -- --run --passWithNoTests" 300
fi

# 4. Security audit (only check for high/critical vulnerabilities)
if command_exists npm; then
  echo "${BLUE}üîí Running security audit...${NC}"
  if npm audit --audit-level=high --omit=dev --silent 2>/dev/null; then
    echo "${GREEN}‚úÖ Security audit passed${NC}"
  else
    echo "${YELLOW}‚ö†Ô∏è Security vulnerabilities found, please review${NC}"
    # Don't fail the commit for security warnings, just warn
  fi
fi

# 5. Lint check (without fixing)
run_check "ESLint check" "npm run lint -- --max-warnings 0" 120

# 6. Format check (without fixing)
if command_exists prettier && [ -f "package.json" ]; then
  run_check "Prettier format check" "npm run format:check" 60
fi

# 7. Build check (ensure code compiles)
run_check "Build verification" "npm run build" 300

echo "${GREEN}‚úÖ All pre-commit checks completed successfully!${NC}"
