// =============================================================================// CryptoPulse Cloud Functions - Main Entry Point// =============================================================================// Northflank cloud functions for CryptoPulse trading platformconst express = require('express');const cors = require('cors');const helmet = require('helmet');const rateLimit = require('express-rate-limit');// Import cloud functionsconst exchangeService = require('./exchange-service');const cashfreeService = require('./cashfree');const monitoringService = require('./monitoring');const utils = require('./utils');const app = express();// Security middlewareapp.use(helmet());app.use(cors({  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['https://app.cryptopulse.com'],  credentials: true}));// Rate limitingconst limiter = rateLimit({  windowMs: 15 * 60 * 1000, // 15 minutes  max: 100, // limit each IP to 100 requests per windowMs  message: 'Too many requests from this IP, please try again later.'});app.use(limiter);// Body parsingapp.use(express.json({ limit: '10mb' }));app.use(express.urlencoded({ extended: true, limit: '10mb' }));// Health checkapp.get('/health', (req, res) => {  res.json({    status: 'healthy',    timestamp: new Date().toISOString(),    service: 'cryptopulse-cloud-functions',    version: '1.0.0'  });});// Exchange service routesapp.use('/exchange', exchangeService);// Payment service routesapp.use('/payment', cashfreeService);// Monitoring service routesapp.use('/monitoring', monitoringService);// Utility routesapp.use('/utils', utils);// Error handlingapp.use((err, req, res, next) => {  res.status(500).json({    error: 'Internal server error',    message: process.env.NODE_ENV === 'production' ? 'Something went wrong' : err.message  });});// 404 handlerapp.use('*', (req, res) => {  res.status(404).json({    error: 'Not found',    message: 'Cloud function endpoint not found'  });});// Export for Northflankmodule.exports = app;// If running directlyif (require.main === module) {  const PORT = process.env.PORT || 3001;  app.listen(PORT, () => {  });}