// =============================================================================// CryptoPulse Cashfree Payment Service - Cloud Function// =============================================================================// Handles payment processing and subscription managementconst express = require('express');const axios = require('axios');const crypto = require('crypto');const router = express.Router();// Cashfree configurationconst CASHFREE_CONFIG = {  baseUrl: process.env.CASHFREE_BASE_URL || 'https://sandbox.cashfree.com',  appId: process.env.CASHFREE_APP_ID,  secretKey: process.env.CASHFREE_SECRET_KEY,  webhookSecret: process.env.CASHFREE_WEBHOOK_SECRET};// Subscription plansconst SUBSCRIPTION_PLANS = {  basic: {    id: 'basic',    name: 'Basic Plan',    price: 999, // ₹999    duration: 30, // 30 days    features: ['Basic trading', '5 strategies', 'Email support']  },  pro: {    id: 'pro',    name: 'Pro Plan',    price: 1999, // ₹1999    duration: 30, // 30 days    features: ['Advanced trading', '15 strategies', 'Priority support', 'Risk management']  },  enterprise: {    id: 'enterprise',    name: 'Enterprise Plan',    price: 4999, // ₹4999    duration: 30, // 30 days    features: ['All features', 'Unlimited strategies', '24/7 support', 'Custom integrations']  }};// Create payment orderrouter.post('/create-order', async (req, res) => {  try {    const {       planId,       userId,       customerDetails,      returnUrl,      notifyUrl     } = req.body;    if (!planId || !userId || !customerDetails) {      return res.status(400).json({        success: false,        error: 'Missing required parameters'      });    }    const plan = SUBSCRIPTION_PLANS[planId];    if (!plan) {      return res.status(400).json({        success: false,        error: 'Invalid subscription plan'      });    }    const orderId = `order_${Date.now()}_${userId}`;    const orderAmount = plan.price;    const orderCurrency = 'INR';    // Create order data    const orderData = {      order_id: orderId,      order_amount: orderAmount,      order_currency: orderCurrency,      customer_details: {        customer_id: userId,        customer_name: customerDetails.name,        customer_email: customerDetails.email,        customer_phone: customerDetails.phone      },      order_meta: {        return_url: returnUrl || `${process.env.FRONTEND_URL}/payment/success`,        notify_url: notifyUrl || `${process.env.BACKEND_URL}/api/payment/webhook`,        payment_methods: 'cc,dc,nb,upi,paypal',        order_note: `CryptoPulse ${plan.name} subscription`      }    };    // Create signature    const signature = createCashfreeSignature(orderData);    // Make API call to Cashfree    const response = await axios.post(`${CASHFREE_CONFIG.baseUrl}/pg/orders`, orderData, {      headers: {        'x-api-version': '2022-09-01',        'x-client-id': CASHFREE_CONFIG.appId,        'x-client-secret': CASHFREE_CONFIG.secretKey,        'x-signature': signature,        'Content-Type': 'application/json'      }    });    res.json({      success: true,      data: {        orderId: response.data.order_id,        paymentSessionId: response.data.payment_session_id,        orderAmount: orderAmount,        orderCurrency: orderCurrency,        plan: plan,        paymentUrl: response.data.payment_url,        expiresAt: response.data.expires_at      }    });  } catch (error) {    res.status(500).json({      success: false,      error: 'Failed to create payment order',      details: error.response?.data?.message || error.message    });  }});// Verify paymentrouter.post('/verify-payment', async (req, res) => {  try {    const { orderId, paymentId } = req.body;    if (!orderId || !paymentId) {      return res.status(400).json({        success: false,        error: 'Order ID and Payment ID are required'      });    }    // Get payment details from Cashfree    const response = await axios.get(`${CASHFREE_CONFIG.baseUrl}/pg/orders/${orderId}/payments/${paymentId}`, {      headers: {        'x-api-version': '2022-09-01',        'x-client-id': CASHFREE_CONFIG.appId,        'x-client-secret': CASHFREE_CONFIG.secretKey,        'Content-Type': 'application/json'      }    });    const paymentData = response.data;    // Verify payment status    const isPaymentSuccessful = paymentData.payment_status === 'SUCCESS';    const isPaymentCompleted = paymentData.payment_status === 'COMPLETED';    if (isPaymentSuccessful || isPaymentCompleted) {      // Update user subscription in database      await updateUserSubscription(orderId, paymentData);    }    res.json({      success: true,      data: {        orderId: paymentData.order_id,        paymentId: paymentData.payment_id,        paymentStatus: paymentData.payment_status,        paymentAmount: paymentData.payment_amount,        paymentCurrency: paymentData.payment_currency,        paymentTime: paymentData.payment_time,        isSuccessful: isPaymentSuccessful || isPaymentCompleted      }    });  } catch (error) {    res.status(500).json({      success: false,      error: 'Failed to verify payment',      details: error.response?.data?.message || error.message    });  }});// Handle webhookrouter.post('/webhook', async (req, res) => {  try {    const signature = req.headers['x-webhook-signature'];    const payload = JSON.stringify(req.body);    // Verify webhook signature    if (!verifyWebhookSignature(payload, signature)) {      return res.status(401).json({        success: false,        error: 'Invalid webhook signature'      });    }    const webhookData = req.body;    const { type, data } = webhookData;    // Handle different webhook events    switch (type) {      case 'PAYMENT_SUCCESS_WEBHOOK':        await handlePaymentSuccess(data);        break;      case 'PAYMENT_FAILED_WEBHOOK':        await handlePaymentFailed(data);        break;      case 'PAYMENT_USER_DROPPED_WEBHOOK':        await handlePaymentDropped(data);        break;      default:    }    res.json({      success: true,      message: 'Webhook processed successfully'    });  } catch (error) {    res.status(500).json({      success: false,      error: 'Webhook processing failed'    });  }});// Get subscription plansrouter.get('/plans', (req, res) => {  res.json({    success: true,    data: {      plans: Object.values(SUBSCRIPTION_PLANS)    }  });});// Get user subscription statusrouter.get('/subscription/:userId', async (req, res) => {  try {    const { userId } = req.params;    // Get user subscription from database    const subscription = await getUserSubscription(userId);    res.json({      success: true,      data: {        userId,        subscription: subscription || null,        isActive: subscription ? isSubscriptionActive(subscription) : false      }    });  } catch (error) {    res.status(500).json({      success: false,      error: 'Failed to get subscription status'    });  }});// Cancel subscriptionrouter.post('/cancel-subscription', async (req, res) => {  try {    const { userId, reason } = req.body;    if (!userId) {      return res.status(400).json({        success: false,        error: 'User ID is required'      });    }    // Cancel subscription in database    await cancelUserSubscription(userId, reason);    res.json({      success: true,      message: 'Subscription cancelled successfully'    });  } catch (error) {    res.status(500).json({      success: false,      error: 'Failed to cancel subscription'    });  }});// Helper functionsfunction createCashfreeSignature(data) {  const message = JSON.stringify(data);  return crypto.createHmac('sha256', CASHFREE_CONFIG.secretKey).update(message).digest('hex');}function verifyWebhookSignature(payload, signature) {  const expectedSignature = crypto    .createHmac('sha256', CASHFREE_CONFIG.webhookSecret)    .update(payload)    .digest('hex');  return signature === expectedSignature;}async function updateUserSubscription(orderId, paymentData) {  // Update user subscription in database  // This would integrate with your database  // Example implementation:  // await db.collection('subscriptions').insertOne({  //   orderId,  //   userId: paymentData.customer_details.customer_id,  //   planId: paymentData.order_meta.plan_id,  //   status: 'active',  //   startDate: new Date(),  //   endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days  //   paymentId: paymentData.payment_id,  //   amount: paymentData.payment_amount  // });}async function getUserSubscription(userId) {  // Get user subscription from database  // This would integrate with your database  // Example implementation:  // return await db.collection('subscriptions').findOne({  //   userId,  //   status: 'active'  // });  return null; // Placeholder}function isSubscriptionActive(subscription) {  if (!subscription) return false;  const now = new Date();  const endDate = new Date(subscription.endDate);  return subscription.status === 'active' && endDate > now;}async function cancelUserSubscription(userId, reason) {  // Cancel user subscription in database  // Example implementation:  // await db.collection('subscriptions').updateOne(  //   { userId, status: 'active' },  //   {   //     $set: {   //       status: 'cancelled',  //       cancelledAt: new Date(),  //       cancellationReason: reason  //     }  //   }  // );}async function handlePaymentSuccess(data) {  await updateUserSubscription(data.order_id, data);}async function handlePaymentFailed(data) {  // Handle failed payment}async function handlePaymentDropped(data) {  // Handle dropped payment}module.exports = router;