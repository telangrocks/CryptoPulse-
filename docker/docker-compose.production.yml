# =============================================================================
# CryptoPulse Production Docker Compose Configuration - 100% Production Ready
# =============================================================================
# Comprehensive multi-container setup with advanced production features

version: '3.8'

services:
  # =========================================================================
  # Database Services
  # =========================================================================
  
  # PostgreSQL Database - Primary
  postgres:
    image: postgres:15-alpine
    container_name: cryptopulse-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: cryptopulse_prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "5432:5432"
    networks:
      - cryptopulse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d cryptopulse_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
      - /var/log/postgresql
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

  # PostgreSQL Database - Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: cryptopulse-postgres-replica
    restart: unless-stopped
    environment:
      POSTGRES_DB: cryptopulse_prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER}
      POSTGRES_MASTER_SERVICE: postgres
      POSTGRES_MASTER_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_MASTER_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./docker/postgres/replica-init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - cryptopulse-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d cryptopulse_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
      - /var/log/postgresql
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Redis Cache - Primary
  redis:
    image: redis:7-alpine
    container_name: cryptopulse-redis-primary
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
    volumes:
      - redis_primary_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - cryptopulse-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Redis Cache - Replica
  redis-replica:
    image: redis:7-alpine
    container_name: cryptopulse-redis-replica
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --replicaof redis 6379
      --masterauth ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_replica_data:/data
    ports:
      - "6380:6379"
    networks:
      - cryptopulse-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: cryptopulse-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: cryptopulse_prod
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf
    ports:
      - "27017:27017"
    networks:
      - cryptopulse-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # =========================================================================
  # Application Services
  # =========================================================================

  # Backend API - Primary Instance
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        PNPM_VERSION: 10.18.0
    container_name: cryptopulse-backend-primary
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 1337
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/cryptopulse_prod
      DATABASE_REPLICA_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-replica:5432/cryptopulse_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      REDIS_REPLICA_URL: redis://:${REDIS_PASSWORD}@redis-replica:6379
      MONGODB_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/cryptopulse_prod
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CSRF_SECRET: ${CSRF_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      LOG_LEVEL: info
      ENABLE_MONITORING: 'true'
      ENABLE_TRACING: 'true'
      CLUSTER_MODE: 'true'
    ports:
      - "1337:1337"
    networks:
      - cryptopulse-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
      - /app/uploads
      - /app/backups
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 5s
        monitor: 60s
        max_failure_ratio: 0.3
      placement:
        constraints:
          - node.labels.backend == true

  # Backend API - Secondary Instance
  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        PNPM_VERSION: 10.18.0
    container_name: cryptopulse-backend-secondary
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 1337
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/cryptopulse_prod
      DATABASE_REPLICA_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-replica:5432/cryptopulse_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      REDIS_REPLICA_URL: redis://:${REDIS_PASSWORD}@redis-replica:6379
      MONGODB_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/cryptopulse_prod
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CSRF_SECRET: ${CSRF_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      LOG_LEVEL: info
      ENABLE_MONITORING: 'true'
      ENABLE_TRACING: 'true'
      CLUSTER_MODE: 'true'
    ports:
      - "1338:1337"
    networks:
      - cryptopulse-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
      - /app/uploads
      - /app/backups
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.labels.backend == true

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        PNPM_VERSION: 10.18.0
    container_name: cryptopulse-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      VITE_ENCRYPTION_KEY: ${VITE_ENCRYPTION_KEY}
      VITE_APP_VERSION: ${VITE_APP_VERSION}
    ports:
      - "3000:80"
    networks:
      - cryptopulse-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.labels.frontend == true

  # Cloud Services
  cloud:
    build:
      context: ./cloud
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        PNPM_VERSION: 10.18.0
    container_name: cryptopulse-cloud
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/cryptopulse_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      LOG_LEVEL: info
      ENABLE_MONITORING: 'true'
    ports:
      - "3001:3001"
    networks:
      - cryptopulse-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
      - /app/uploads
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # =========================================================================
  # Reverse Proxy and Load Balancer
  # =========================================================================

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cryptopulse-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    networks:
      - cryptopulse-network
    depends_on:
      - frontend
      - backend
      - cloud
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.labels.nginx == true

  # =========================================================================
  # Monitoring and Observability
  # =========================================================================

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cryptopulse-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - cryptopulse-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: cryptopulse-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_LOG_LEVEL: info
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/plugins:/var/lib/grafana/plugins
    networks:
      - cryptopulse-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # =========================================================================
  # Backup and Maintenance Services
  # =========================================================================

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: cryptopulse-db-backup
    restart: "no"
    environment:
      POSTGRES_DB: cryptopulse_prod
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *" # Daily at 2 AM
    volumes:
      - ./backups:/backups
      - ./scripts/backup-db.sh:/backup-script.sh
    networks:
      - cryptopulse-network
    depends_on:
      postgres:
        condition: service_healthy
    command: ["sh", "-c", "chmod +x /backup-script.sh && crond -f"]
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Log Rotation Service
  logrotate:
    image: alpine:latest
    container_name: cryptopulse-logrotate
    restart: unless-stopped
    volumes:
      - ./logs:/logs
      - ./docker/logrotate/logrotate.conf:/etc/logrotate.conf
      - ./docker/logrotate/logrotate.d:/etc/logrotate.d
    command: ["sh", "-c", "while true; do sleep 86400; /usr/sbin/logrotate -f /etc/logrotate.conf; done"]
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

# =========================================================================
# Volumes
# =========================================================================
volumes:
  postgres_primary_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres/primary
  postgres_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres/replica
  redis_primary_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis/primary
  redis_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis/replica
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mongodb
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

# =========================================================================
# Networks
# =========================================================================
networks:
  cryptopulse-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: cryptopulse-br
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
